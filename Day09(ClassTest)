package ClassTest01;

import javax.swing.plaf.multi.MultiListUI;
import java.util.Random;
import java.util.function.Function;

public class Role {
    private String name;
    private int blood;

    public Role() {
    }

    public Role(String name, int blood) {
        this.name = name;
        this.blood = blood;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getBlood() {
        return blood;
    }

    public void setBlood(int blood) {
        this.blood = blood;
    }

    public void attack(Role role) {
        Random r = new Random();
        int hurt = r.nextInt(20) + 1;
        int restBlood = role.getBlood() - hurt;
        restBlood = restBlood < 0 ? 0 : restBlood;
        role.setBlood(restBlood);
        System.out.println(this.getName() + "举起拳头攻击了" + role.getName() +
                "一下，造成了" + hurt +
                "点伤害，" + role.getName() + "还剩" + role.getBlood() +
                "点血量");
    }

}



package ClassTest01;

import java.util.concurrent.TimeUnit;

public class GameTest {
    public static void main(String[] args) {
        Role r1 = new Role("张宏祥",100);
        Role r2 = new Role("陈永飞",100);
        while (true) {
            r1.attack(r2);
            if (r2.getBlood() == 0) {
                System.out.println(r1.getName() + "K.O了" + r2.getName());
                break;
            }
            try {
                TimeUnit.SECONDS.sleep(1);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            r2.attack(r1);
            if (r1.getBlood() == 0) {
                System.out.println(r2.getName() + "K.O了" + r1.getName());
                break;
            }
            try {
                TimeUnit.SECONDS.sleep(1);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

    }
}




package ClassTest02;

import java.util.Random;

public class Role {
    String[] boyfaces = {"风流俊雅", "气宇轩昂", "相貌英俊",
            "五官端正", "相貌平平", "一塌糊涂", "面目狰狞"};
    String[] girlfaces = {"美奂绝伦", "沉鱼落雁", "婷婷玉立",
            "身材娇好", "相貌平平", "相貌简陋", "惨不忍睹"};
    //attack 攻击描述：
    String[] attacks_desc = {
            "%s使出了一招【背心钉】，转到对方的身后，一掌向%s背心的灵台穴拍去。",
            "%s使出了一招【游空探爪】，飞起身形自半空中变掌为抓锁向%s。",
            "%s大喝一声，身形下伏，一招【劈雷坠地】，捶向%s双腿。",
            "%s运气于掌，一瞬间掌心变得血红，一式【掌心雷】，推向%s。",
            "%s阴手翻起阳手跟进，一招【没遮拦】，结结实实的捶向%s。",
            "%s上步抢身，招中套招，一招【劈挂连环】，连环攻向%s。"
    };
    //injured 受伤描述：
    String[] injureds_desc = {
            "结果%s退了半步，毫发无损",
            "结果给%s造成一处瘀伤",
            "结果一击命中，%s痛得弯下腰",
            "结果%s痛苦地闷哼了一声，显然受了点内伤",
            "结果%s摇摇晃晃，一跤摔倒在地",
            "结果%s脸色一下变得惨白，连退了好几步",
            "结果『轰』的一声，%s口中鲜血狂喷而出",
            "结果%s一声惨叫，像滩软泥般塌了下去"
    };
    private String name;
    private int blood;
    private char gender;
    private String face;

    public Role() {
    }

    public Role(String name, int blood, char gender) {
        this.name = name;
        this.blood = blood;
        this.gender = gender;
        setFace(gender);
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getBlood() {
        return blood;
    }

    public void setBlood(int blood) {
        this.blood = blood;
    }

    public char getGender() {
        return gender;
    }

    public void setGender(char gender) {
        this.gender = gender;
    }

    public String getFace() {
        return face;
    }

    public void setFace(char gender) {
        Random r = new Random();
        if (gender == '男') {
            int index = r.nextInt(boyfaces.length);
            face = boyfaces[index];
        } else if (gender == '女') {
            int index = r.nextInt(girlfaces.length);
            face = girlfaces[index];
        } else {
            face = "惨不忍睹";
        }
        this.face = face;
    }


    public void attack(Role role) {
        Random r = new Random();
        int index = r.nextInt(attacks_desc.length);
        String kungfu = attacks_desc[index];
        System.out.printf(kungfu, this.getName(), role.getName());
        int hurt = r.nextInt(20) + 1;
        System.out.println("造成了" + hurt + "点伤害");
        int restBlood = role.getBlood() - hurt;
        restBlood = restBlood < 0 ? 0 : restBlood;
        role.setBlood(restBlood);
        if (restBlood > 90) {
            System.out.printf(injureds_desc[0], role.getName(), this.getName() + "\n");
        } else if (restBlood <= 90 && restBlood > 80) {
            System.out.printf(injureds_desc[1], role.getName(), this.getName() + "\n");
        } else if (restBlood <= 80 && restBlood > 70) {
            System.out.printf(injureds_desc[2], role.getName(), this.getName() + "\n");
        } else if (restBlood <= 70 && restBlood > 60) {
            System.out.printf(injureds_desc[3], role.getName(), this.getName() + "\n");
        } else if (restBlood <= 60 && restBlood > 40) {
            System.out.printf(injureds_desc[4], role.getName(), this.getName() + "\n");
        } else if (restBlood <= 40 && restBlood > 20) {
            System.out.printf(injureds_desc[5], role.getName(), this.getName() + "\n");
        } else if (restBlood <= 20 && restBlood > 10) {
            System.out.printf(injureds_desc[6], role.getName(), this.getName() + "\n");
        } else {
            System.out.printf(injureds_desc[7], role.getName(), this.getName() + "\n");
        }
        System.out.println("。"+role.getName() + "剩余" + restBlood + "点血量");
        System.out.println();
        System.out.println();
    }

    public void showRoleinfo() {
        System.out.println("姓名为:" + getName());
        System.out.println("血量为:" + getBlood());
        System.out.println("性别为:" + getGender());
        System.out.println("长相为:" + getFace());
    }
}




package ClassTest02;

import java.util.concurrent.TimeUnit;

public class GameTest {
    public static void main(String[] args) {
        Role r1 = new Role("喜羊羊",100,'男');
        Role r2 = new Role("灰太狼",100,'男');
        r1.showRoleinfo();
        r2.showRoleinfo();
       while (true) {
            r1.attack(r2);
            if (r2.getBlood() == 0) {
                System.out.println(r1.getName() + "K.O了" + r2.getName());
                break;
            }
            try {
                TimeUnit.SECONDS.sleep(1);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            r2.attack(r1);
            if (r1.getBlood() == 0) {
                System.out.println(r2.getName() + "K.O了" + r1.getName());
                break;
            }
            try {
                TimeUnit.SECONDS.sleep(1);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
       }

    }
}




package ClassTest02;

public class Test {
    public static void main(String[] args) {
        System.out.println("HelloWorld");
        System.out.printf("你好啊%s","张三"+"\n");//"\n"--换行
        //System.out.println(); 换行
        System.out.printf("%s：你好啊%s","张三","李四 ");//张三：你好啊李四
    }
}




package ClassTest03;

public class Goods {
    private String id;
    private String name;
    private double price;
    private int count;

    public Goods() {
    }

    public Goods(String id, String name, double price, int count) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.count = count;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getCount() {
        return count;
    }

    public void setCount(int count) {
        this.count = count;
    }
}




package ClassTest03;

public class GoodsTest {
    public static void main(String[] args) {
        Goods[] arr = new Goods[3];
        Goods g1 = new Goods("001", "华为手机", 4999.99, 100);
        Goods g2 = new Goods("002", "保温杯", 199.99, 120);
        Goods g3 = new Goods("003", "耳机", 999.99, 10);
        arr[0] = g1;
        arr[1] = g2;
        arr[2] = g3;
        for (int i = 0; i < arr.length; i++) {
            Goods goods = arr[i];
            System.out.println(goods.getId() + "," + goods.getName()+","+goods.getPrice()+","+goods.getCount());
        }
    }
}




package ClassTest04;

import java.util.Scanner;

public class Test01 {
    public static void main(String[] args) {
        //键盘录入：
        //第一套体系:
        //nextInt(); 接收整数
        //nextDouble();接收小数
        //next();接收字符串
        //遇到空格，制表符，回车就停止接受。这些符号后面的数据就不会接受了

        //第二套体系：
        //nextLine();接收字符串
        //可以接收空格，制表符，遇到回车才停止接受数据
        /*Scanner sc = new Scanner(System.in);
        System.out.println("请输入第一个整数");//123 123
        int num1 = sc.nextInt();//123
        System.out.println(num1);
        System.out.println("请输入第二个整数");
        int num2 = sc.nextInt();
        System.out.println(num2);//123*/

        Scanner sc =  new Scanner(System.in);
        System.out.println("请输入第一个字符串");
        String str1 = sc.nextLine();//abc bcd
        System.out.println(str1);//abc bcd
        System.out.println("请输入第二个字符串");
        String str2 = sc.nextLine();//哈哈
        System.out.println(str2);//哈哈
    }
}




package ClassTest04;

import java.util.Scanner;

public class Test02 {
    public static void main(String[] args) {
        //键盘录入的两套体系不能混用的
        //弊端：先用nextInt，再用nextLine会导致下面的nextLine接受不到数据
        Scanner sc = new Scanner(System.in);
        System.out.println("请输入一个整数");
        int num = sc.nextInt();//123 + 回车
        System.out.println(num);//123
        System.out.println("请输入一个字符串");
        String line = sc.nextLine();
        System.out.println(line);//
    }
}




package ClassTest05;

public class Car {
    private String brand;
    private double price;
    private String color;

    public Car() {
    }

    public Car(String brand, double price, String color) {
        this.brand = brand;
        this.price = price;
        this.color = color;
    }

    public String getBrand() {
        return brand;
    }

    public void setBrand(String brand) {
        this.brand = brand;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }
}




package ClassTest05;

import java.util.Scanner;

public class CarTest {
    public static void main(String[] args) {
        Car arr[] = new Car[3];
        for (int i = 0; i < arr.length; i++) {
            Car car = new Car();
            System.out.println("请输入汽车的品牌");
            String brand = new Scanner(System.in).next();
            car.setBrand(brand);
            System.out.println("请输入汽车的价格");
            int price = new Scanner(System.in).nextInt();
            car.setPrice(price);
            System.out.println("请输入汽车的颜色");
            String color = new Scanner(System.in).next();
            car.setColor(color);
            arr[i] = car;
        }
        for (int i = 0; i < arr.length; i++) {
            Car car = arr[i];
            System.out.println("品牌为" + car.getBrand()+"，价格为"+car.getPrice()+"元，颜色为"+car.getColor());
        }
    }
}




package ClassTest06;

import ClassTest05.Car;

public class Phone {
    private String brand;
    private int pirce;
    private String color;

    public Phone() {
    }

    public Phone(String brand, int pirce, String color) {
        this.brand = brand;
        this.pirce = pirce;
        this.color = color;
    }

    public String getBrand() {
        return brand;
    }

    public void setBrand(String brand) {
        this.brand = brand;
    }

    public int getPirce() {
        return pirce;
    }

    public void setPirce(int pirce) {
        this.pirce = pirce;
    }

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }
    /*public int average(){
        int price = 0;
        price = getPirce();
        int sum = 0;
        sum = sum + price;
        int average = sum / arr.length;
        return average;
    }*/
}




package ClassTest06;

import java.time.Period;
import java.util.Scanner;

public class PhoneTest {
    public static void main(String[] args) {
        Phone arr[] = new Phone[3];
        for (int i = 0; i < arr.length; i++) {
            Phone phone = new Phone();
            System.out.println("请输入手机的品牌");
            String brand = new Scanner(System.in).next();
            phone.setBrand(brand);
            System.out.println("请输入手机的价格");
            int price = new Scanner(System.in).nextInt();
            phone.setPirce(price);
            System.out.println("请输入手机的颜色");
            String color = new Scanner(System.in).next();
            phone.setColor(color);
            arr[i] = phone;
        }
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            Phone phone = arr[i];
            //int sum = 0;
            sum = sum + phone.getPirce();;
        }
        System.out.println("平均价格为"+ (sum/arr.length));
        /*for (int i = 0; i < arr.length; i++) {
            Phone phone = arr[i];
            System.out.println("手机品牌为" + phone.getBrand()+"，价格为"+phone.getPirce()+"，颜色为"+phone.getColor());
        }*/


    }
}




package ClassTest07;

public class GirlFriend {
    private String name;
    private int age;
    private char gender;
    private String hobby;

    public GirlFriend() {
    }

    public GirlFriend(String name, int age, char gender, String hobby) {
        this.name = name;
        this.age = age;
        this.gender = gender;
        this.hobby = hobby;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        if (age >= 18 && age <= 25) {
            return age;
        }else System.out.println("超出范围");
        return 0;

    }

    public void setAge(int age) {
            this.age = age;
    }

    public char getGender() {
        return gender;
    }

    public void setGender(char gender) {
        this.gender = gender;
    }

    public String getHobby() {
        return hobby;
    }

    public void setHobby(String hobby) {
        this.hobby = hobby;
    }
}




package ClassTest07;

public class GirlFriendTest {
    public static void main(String[] args) {
        GirlFriend arr[] = new GirlFriend[4];
        GirlFriend g1 = new GirlFriend("小诗诗", 19, '女', "吃");
        GirlFriend g2 = new GirlFriend("小萌萌", 18, '女', "喝");
        GirlFriend g3 = new GirlFriend("小蓉蓉", 19, '女', "玩");
        GirlFriend g4 = new GirlFriend("小花花", 20, '女', "乐");
        arr[0] = g1;
        arr[1] = g2;
        arr[2] = g3;
        arr[3] = g4;
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            GirlFriend girl = arr[i];
            sum = sum + girl.getAge();
        }
        int average = sum / arr.length;
        System.out.println("四个女朋友的平均年龄为" + average);
        int count = 0;
        for (int i = 0; i < arr.length; i++) {
            GirlFriend girl = arr[i];
            if (girl.getAge() < average) {
                count++;
                System.out.println("基本信息为" + "\n" +
                        "姓名为" + girl.getName() + "\n" +
                        "年龄为" + girl.getAge() + "\n" +
                        "性别为" + girl.getGender() + "\n" +
                        "爱好：" + girl.getHobby());
            }
        }
        System.out.println("有"+count +"个女朋友年龄比平均年龄低");
    }
}




package ClassTest08;

public class Student {
    private int id;
    private String name;
    private int age;

    public Student() {
    }

    public Student(int id, String name, int age) {
        this.id = id;
        this.name = name;
        this.age = age;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}




package ClassTest08;

public class Test01 {
    public static void main(String[] args) {
         /*定义一个长度为3的数组，数组存储1~3名学生对象作为初始数据，学生对象的学号，姓名各不相同。
        学生的属性：学号，姓名，年龄。
        要求1：再次添加一个学生对象，并在添加的时候进行学号的唯一性判断。
        要求2：添加完毕之后，遍历所有学生信息。

        要求3：通过id删除学生信息
        如果存在，则删除，如果不存在，则提示删除失败。
        要求4：删除完毕之后，遍历所有学生信息。
        要求5：查询数组id为“heima002”的学生，如果存在，则将他的年龄+1岁*/

        Student[] arr = new Student[3];
        Student stu1 = new Student(1, "张三", 19);
        Student stu2 = new Student(2, "李四", 20);
       // Student stu3 = new Student(3, "王五", 18);
        arr[0] = stu1;
        arr[1] = stu2;
       // arr[2] = stu3;
        Student stu4 = new Student(4, "黑马", 19);
        boolean flag = contains(arr, stu4.getId());
        if (flag) {
            System.out.println("当前id重复，请修改id后再进行添加");
        } else {
            int count = getCount(arr);
            if (count == arr.length) {
                Student[] newArr = getNewArr(arr);
                newArr[count] = stu4;
                    printArr(newArr);
            }
                else{
                    arr[count] = stu4;
                for (int i = 0; i < arr.length; i++) {
                    Student student = arr[i];

                } printArr(arr);
                }
            }
        }
    public static boolean contains(Student arr[],int id){
        //判断学号的唯一
        for (int i = 0; i < arr.length; i++) {
            //依次获取到数组里面的每一个学生对象
            Student stu = arr[i];
            //非空判断
            if(stu != null){
                //获取数组中学生对象的id
                int sid = stu.getId();
                //比较
                if(sid == id){
                    return true;
                }
            }
        }
        //当循环结束之后，还没有找到一样的，那么就表示数组中要查找的id是不存在的。
        return false;
    }
    public static int getCount(Student arr[]){
        int count = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] != null){
                count++;
            }
        }
        return count;
    }
    public static Student[] getNewArr(Student arr[]){
        Student newArr[] = new Student[arr.length + 1];
        for (int i = 0; i < arr.length; i++) {
            newArr[i] = arr[i];
        }
        return newArr;
    }
    public static void printArr(Student[] arr){
        for (int i = 0; i < arr.length; i++) {
            Student stu = arr[i];
            if(stu != null){
                System.out.println(stu.getId() + ", " + stu.getName() + ", " + stu.getAge());
            }
        }
    }
}




package ClassTest08;

import java.util.Scanner;

public class Test02 {
    public static void main(String[] args) {
        //要求3：通过id删除学生信息
        //要求4：删除完毕之后，遍历所有学生信息。
        Student[] arr = new Student[3];
        Student stu1 = new Student(1, "张三", 19);
        Student stu2 = new Student(2, "李四", 20);
        Student stu3 = new Student(3, "王五", 18);
        arr[0] = stu1;
        arr[1] = stu2;
        arr[2] = stu3;
        //Student stu4 = new Student(4, "黑马", 19);
        int id = new Scanner(System.in).nextInt();
        boolean flag = contains(arr, id);
        if (flag) {
            //id存在
            //获取索引
            int index = getIndex(arr, id);
            //获取新的数组
            Student newArr[] = getNewArr(arr, index);
            //遍历删除完后的的数组
            if (index >= 0) {
                //如果存在，则删除
             /*   arr[index] = null;
                //遍历数组
                printArr(arr);
            }else{
                //如果不存在，则提示删除失败
                System.out.println("当前id不存在，删除失败");
            }*/
                // printArr(newArr);
                for (int i = 0; i < arr.length; i++) {
                    Student stu = arr[i];
                    if (stu != null) {
                        System.out.println(stu.getId() + ", " + stu.getName() + ", " + stu.getAge());
                    }
                }
            }
        } else {
            //id不存在
            System.out.println("该id不存在");
        }
    }

    public static boolean contains(Student arr[], int id) {
        //判断id是否存在
        for (int i = 0; i < arr.length; i++) {
            //依次获取到数组里面的每一个学生对象
            Student stu = arr[i];
            //非空判断
            if (stu != null) {
                //获取数组中学生对象的id
                int sid = stu.getId();
                //比较
                if (sid == id) {
                    return true;
                }
            }
        }
        //当循环结束之后，还没有找到一样的，那么就表示数组中要查找的id是不存在的。
        return false;
    }

    public static int getIndex(Student[] arr , int id){
        for (int i = 0; i < arr.length; i++) {
            //依次得到每一个学生对象
            Student stu = arr[i];
            //对stu进行一个非空判断
            if(stu != null){
                int sid = stu.getId();
                if(sid == id){
                    return i;
                }
            }
        }

        //当循环结束之后，还没有找到就表示不存在
        return -1;
    }


    /*public static int getIndex(Student[] arr, int id) {
        //id存在，获取索引
        int index = 0;
        for (int i = 0; i < arr.length; i++) {
            Student stu = arr[i];
            if (arr[i].getId() == id) {
                if (i-1 >=0) {
                    index = i - 1;
                }else{
                    index = i;
                }
            }
        }
        return index;
    }*/

    public static Student[] getNewArr(Student arr[], int index) {
        Student newArr[] = new Student[arr.length - 1];
        for (int i = 0; i < arr.length; i++) {
            arr[index] = null;

        }
        for (int i = 0; i < newArr.length; i++) {
            newArr[i] = arr[i];
        }
        return newArr;
    }

    public static void printArr(Student arr[]) {
        for (int i = 0; i < arr.length; i++) {
            Student stu = arr[i];
            if (stu != null) {
                System.out.println(stu.getId() + ", " + stu.getName() + ", " + stu.getAge());
            }
        }
    }
}




package ClassTest08;

import java.util.Scanner;

public class Test03 {
    public static void main(String[] args) {
        //要求5：查询数组id为“heima002”的学生，如果存在，则将他的年龄+1岁
        Student[] arr = new Student[3];
        Student stu1 = new Student(1, "张三", 19);
        Student stu2 = new Student(2, "李四", 20);
        Student stu3 = new Student(3, "王五", 18);
        arr[0] = stu1;
        arr[1] = stu2;
        arr[2] = stu3;
        int id = new Scanner(System.in).nextInt();
        boolean flag = contains(arr, id);
        if (flag) {
            int index = getIndex(arr, id);
            //存在， 则将他的年龄+1岁
            Student stu = arr[index];
            //把原来的年龄拿出来
            int newAge = stu.getAge() + 1;
            //把+1之后的年龄塞回去
            stu.setAge(newAge);
            printArr(arr);

            // System.out.println(arr[index].getId()+","+arr[index].getName()+"," + (arr[index].getAge()+1));
        } else {
            System.out.println("该id不存在");
        }


    }

    public static boolean contains(Student arr[], int id) {
        //判断学号的唯一
        for (int i = 0; i < arr.length; i++) {
            //依次获取到数组里面的每一个学生对象
            Student stu = arr[i];
            //非空判断
            if (stu != null) {
                //获取数组中学生对象的id
                int sid = stu.getId();
                //比较
                if (sid == id) {
                    return true;
                }
            }
        }
        //当循环结束之后，还没有找到一样的，那么就表示数组中要查找的id是不存在的。
        return false;
    }

    public static int getIndex(Student[] arr, int id) {
        //获取索引
        for (int i = 0; i < arr.length; i++) {
            //依次得到每一个学生对象
            Student stu = arr[i];
            //对stu进行一个非空判断
            if (stu != null) {
                int sid = stu.getId();
                if (sid == id) {
                    return i;
                }
            }
        }

        //当循环结束之后，还没有找到就表示不存在
        return -1;
    }


    public static void printArr(Student arr[]){
        for (int i = 0; i < arr.length; i++) {
            Student stu = arr[i];
            if (stu != null) {
                System.out.println(stu.getId() + ", " + stu.getName() + ", " + stu.getAge());
            }
        }
    }
}




package ClassTest08;

public class Test04 {
    public class Test4 {
        public static void main(String[] args) {
        /*定义一个长度为3的数组，数组存储1~3名学生对象作为初始数据，学生对象的学号，姓名各不相同。
        学生的属性：学号，姓名，年龄。

        要求5：查询数组id为“2”的学生，如果存在，则将他的年龄+1岁*/


            //1.创建一个数组用来存储学生对象
            Student[] arr = new Student[3];
            //2.创建学生对象并添加到数组当中
            Student stu1 = new Student(1, "zhangsan", 23);
            Student stu2 = new Student(2, "lisi", 24);
            Student stu3 = new Student(3, "wangwu", 25);

            //3.把学生对象添加到数组当中
            arr[0] = stu1;
            arr[1] = stu2;
            arr[2] = stu3;


            //4.先要找到id为2的学生对于的索引
            int index = getIndex(arr, 2);

            //5.判断索引
            if(index >= 0){
                //存在， 则将他的年龄+1岁
                Student stu = arr[index];
                //把原来的年龄拿出来
                int newAge = stu.getAge() + 1;
                //把+1之后的年龄塞回去
                stu.setAge(newAge);
                //遍历数组
                printArr(arr);
            }else{
                //不存在，则直接提示
                System.out.println("当前id不存在，修改失败");
            }


        }

        //1.我要干嘛？  找到id在数组中的索引
        //2.我需要什么？ 数组 id
        //3.调用处是否需要继续使用方法的结果？ 要
        public static int getIndex(Student[] arr , int id){
            for (int i = 0; i < arr.length; i++) {
                //依次得到每一个学生对象
                Student stu = arr[i];
                //对stu进行一个非空判断
                if(stu != null){
                    int sid = stu.getId();
                    if(sid == id){
                        return i;
                    }
                }
            }

            //当循环结束之后，还没有找到就表示不存在
            return -1;
        }

        public static void printArr(Student[] arr){
            for (int i = 0; i < arr.length; i++) {
                Student stu = arr[i];
                if(stu != null){
                    System.out.println(stu.getId() + ", " + stu.getName() + ", " + stu.getAge());
                }
            }
        }


    }
}

