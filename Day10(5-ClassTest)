package ClassTest;

import java.util.Scanner;
import java.util.StringJoiner;

public class Test01Case1 {
    public static void main(String[] args) {
        /* 键盘录入一个字符串，
        要求1：长度为小于等于9
        要求2：只能是数字
                将内容变成罗马数字
        下面是阿拉伯数字跟罗马数字的对比关系：
        Ⅰ－1、Ⅱ－2、Ⅲ－3、Ⅳ－4、Ⅴ－5、Ⅵ－6、Ⅶ－7、Ⅷ－8、Ⅸ－9
        注意点：
        罗马数字里面是没有0的
        如果键盘录入的数字包含0，可以变成""(长度为0的字符串)*/
        String str;
        while (true) {
            System.out.println("请输入一个长度小于等于9位的整数");
            str = new Scanner(System.in).next();
            boolean flag = checkStr(str);
            if (flag) {
                break;
            } else System.out.println("数据输入错误");
        }
        //将内容变成罗马数字
        //下面是阿拉伯数字跟罗马数字的对比关系：
        //Ⅰ－1、Ⅱ－2、Ⅲ－3、Ⅳ－4、Ⅴ－5、Ⅵ－6、Ⅶ－7、Ⅷ－8、Ⅸ－9
        int num = 0;
        StringBuilder sb = new StringBuilder();
        StringJoiner sj = new StringJoiner(",","[","]");
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            //System.out.println(c);
            num = c - '0';
            String s = changeLuoMa(num);
            sb.append(s + " ");
            sj.add(s);
        }
        System.out.println(sb);//   Ⅰ Ⅱ Ⅲ
        System.out.println(sj);//   [Ⅰ,Ⅱ,Ⅲ]
    }

    public static boolean checkStr(String str) {
        if (str.length() > 9) {
            return false;
        }
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            if (c <= '0' || c >= '9') {
                return false;
            }
        }
        return true;
    }

    public static String changeLuoMa(int number) {
        String arr[] = {"", "Ⅰ", "Ⅱ", "Ⅲ", "Ⅳ", "Ⅴ", "Ⅵ", "Ⅶ", "Ⅷ", "Ⅸ"};
        return arr[number];
    }
}




package ClassTest;

import java.util.Scanner;
import java.util.StringJoiner;

public class Test01Case2 {
    public static void main(String[] args) {
        /* 键盘录入一个字符串，
        要求1：长度为小于等于9
        要求2：只能是数字
                将内容变成罗马数字
        下面是阿拉伯数字跟罗马数字的对比关系：
        Ⅰ－1、Ⅱ－2、Ⅲ－3、Ⅳ－4、Ⅴ－5、Ⅵ－6、Ⅶ－7、Ⅷ－8、Ⅸ－9
        注意点：
        罗马数字里面是没有0的
        如果键盘录入的数字包含0，可以变成""(长度为0的字符串)*/
        String str;
        while (true) {
            System.out.println("请输入一个长度小于等于9位的整数");
            str = new Scanner(System.in).next();
            boolean flag = checkStr(str);
            if (flag) {
                break;
            } else System.out.println("数据输入错误");
        }
        //将内容变成罗马数字
        //下面是阿拉伯数字跟罗马数字的对比关系：
        //Ⅰ－1、Ⅱ－2、Ⅲ－3、Ⅳ－4、Ⅴ－5、Ⅵ－6、Ⅶ－7、Ⅷ－8、Ⅸ－9
        int num = 0;
        StringBuilder sb = new StringBuilder();
        StringJoiner sj = new StringJoiner(",", "[", "]");
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            //System.out.println(c);
            String s = changeLuoMa(c);
            sb.append(s + " ");
            sj.add(s);
        }
        System.out.println(sb);//   Ⅰ Ⅱ Ⅲ
        System.out.println(sj);//   [Ⅰ,Ⅱ,Ⅲ]
    }

    public static boolean checkStr(String str) {
        if (str.length() > 9) {
            return false;
        }
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            if (c <= '0' || c >= '9') {
                return false;
            }
        }
        return true;
    }

    public static String changeLuoMa(char number) {
        //利用switch进行匹配
        /*String str;
        switch (number) {
            case '0' -> str = "";
            case '1' -> str = "Ⅰ";
            case '2' -> str = "Ⅱ";
            case '3' -> str = "Ⅲ";
            case '4' -> str = "Ⅳ";
            case '5' -> str = "Ⅴ";
            case '6' -> str = "Ⅵ";
            case '7' -> str = "Ⅶ";
            case '8' -> str = "Ⅷ";
            case '9' -> str = "Ⅸ";
            default -> str = "";
        }*/
        String str = switch (number) {
            case '0' -> str = "";
            case '1' -> str = "Ⅰ";
            case '2' -> str = "Ⅱ";
            case '3' -> str = "Ⅲ";
            case '4' -> str = "Ⅳ";
            case '5' -> str = "Ⅴ";
            case '6' -> str = "Ⅵ";
            case '7' -> str = "Ⅶ";
            case '8' -> str = "Ⅷ";
            case '9' -> str = "Ⅸ";
            default -> str = "";
        };
        return str;
    }
}




package ClassTest;

public class Test02Case1 {
    public static void main(String[] args) {
        /* 给定两个字符串, A和B。
        A的旋转操作就是将A 最左边的字符移动到最右边。
        例如, 若A = 'abcde'，在移动一次之后结果就是'bcdea'
        如果在若干次调整操作之后，A能变成B，那么返回True。
        如果不能匹配成功，则返回false*/
        String strA = "abcde";
        String strB = "eabcd";
        strA = changeOrder(strA);
        System.out.println(result(strA,strB));
    }

    //作用：旋转字符串，把左侧的字符移动到右侧去
    //形参：旋转前的字符串
    //返回值：旋转后的字符串
    public static String changeOrder(String strA) {
        //用subString进行截取，把左边的字符截取出来拼接到右侧去
        String first = strA.substring(0, 1);
        String end = strA.substring(1);
        return end + first;
    }

    public static boolean result(String strA, String strB) {
        for (int i = 0; i < strA.length(); i++) {
            strA = changeOrder(strA);
            if (strA.equals(strB)) {
                return true;
            }
        }
        return false;
    }
}




package ClassTest;

public class Test02Case2 {
    public static void main(String[] args) {
        /* 给定两个字符串, A和B。
        A的旋转操作就是将A 最左边的字符移动到最右边。
        例如, 若A = 'abcde'，在移动一次之后结果就是'bcdea'
        如果在若干次调整操作之后，A能变成B，那么返回True。
        如果不能匹配成功，则返回false*/
        String strA = "abcde";
        String strB = "eabcd";
        strA = changeOrder(strA);
        System.out.println(result(strA,strB));
    }

    //作用：旋转字符串，把左侧的字符移动到右侧去
        //形参：旋转前的字符串
        //返回值：旋转后的字符串
    public static String changeOrder(String str) {
        //套路：
        //如果我们看到要修改字符串的内容
        //可以有两个办法：
        //1.用subString进行截取，把左边的字符截取出来拼接到右侧去
        //2.可以把字符串先变成一个字符数组，然后调整字符数组里面数据，最后再把字符数组变成字符串。

        //可以把字符串先变成一个字符数组，然后调整字符数组里面数据，最后再把字符数组变成字符串。


        //"ABC"   ['A','B','C']  ['B','C','A']   new String(字符数组);
        char[] arr = str.toCharArray();
        //拿到0索引上的字符
        char first = arr[0];
        //把剩余的字符依次往前挪一个位置
        for (int i = 1; i < arr.length; i++) {
            arr[i - 1] = arr[i];
        }
        //把原来0索引上的字符放到最后一个索引
        arr[arr.length - 1] = first;

        //利用字符数组创建一个字符串对象
        String result = new String(arr);
        return result;
    }

    public static boolean result(String strA, String strB) {
        for (int i = 0; i < strA.length(); i++) {
            strA = changeOrder(strA);
            if (strA.equals(strB)) {
                return true;
            }
        }
        return false;
    }
}




package ClassTest;

import java.util.Random;
import java.util.Scanner;

public class Test03 {
    public static void main(String[] args) {
        //键盘录入任意字符串，打乱里面的内容
        String str = new Scanner(System.in).next();
        char c[] = getNewStr(str);
        StringBuilder sb = new StringBuilder();
        String s;
        for (int i = 0; i < c.length; i++) {
            sb.append(c[i]);
        }
        System.out.println(sb);
    }

    public static char[] getNewStr(String str) {
        String s;
        char arr[] = str.toCharArray();
        char temp = 0;
        Random r = new Random();
        int rand = r.nextInt(str.length());
        for (int i = 0; i < arr.length; i++) {
            temp = arr[i];
            arr[i] = arr[rand];
            arr[rand] = temp;
        }
        return arr;
    }
}




package ClassTest;

import java.util.Random;

public class Test04 {
    public static void main(String[] args) {
        /*
        生成验证码
        内容：可以是小写字母，也可以是大写字母，还可以是数字
        规则：
        长度为5
        内容中是四位字母，1位数字。
        其中数字只有1位，但是可以出现在任意的位置。*/
        char arr[] = getNewStr(getArr());
        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]);
        }
    }

    public static char[] getArr() {
        char arr[] = new char[52];
        for (int i = 0; i < arr.length; i++) {// A—65   a—97
            if (i <= 25) {
                arr[i] = (char) ('A' + i);//A-Z
            } else arr[i] = (char) ('a' + i - 26);//a-z
        }
        Random r = new Random();
        char newArr[] = new char[5];
        for (int i = 0; i < newArr.length - 1; i++) {
            int index = r.nextInt(52);
            newArr[i] = arr[index];
        }
        char numArr[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
        for (int i = 0; i < numArr.length; i++) {
            int number = r.nextInt(9);
            newArr[newArr.length - 1] = numArr[number];
        }
        return newArr;
    }

    public static char[] getNewStr(char arr[]) {
        char temp = 0;
        Random r = new Random();
        int rand = r.nextInt(arr.length);
        for (int i = 0; i < arr.length; i++) {
            temp = arr[i];
            arr[i] = arr[rand];
            arr[rand] = temp;
        }
        return arr;
    }
}




package ClassTest;

public class Test05 {
    public static void main(String[] args) {
         /* 给定两个以字符串形式表示的非负整数num1和num2，返回num1和num2的乘积，它们的乘积也表示为字符串形式。
        注意：需要用已有的知识完成。*/

        //不需要考虑乘积过大之后的结果
        //就认为乘积一定是小于int的最大值的
        String num1 = "1357";
        String num2 = "2468";
        int number1 = getNum(num1);
        int number2 = getNum(num2);
        System.out.println(number1 * number2);
    }

    public static int getNum(String num) {
        //1.把num1和num2变成对应的整数
        //先遍历字符串依次得到每一个字符
        //再把字符变成对应的数字即可
        //把每一个数字组合到一起
        //把字符串的每一个字符放入数组中
        char arr1[] = num.toCharArray();
        int sum1 = arr1[0] - 48;
        for (int i = 1; i < arr1.length; i++) {
            //  1  3  5  7
            //10  3  5  7
            //100  30  5   7
            //1000  300  50   7
            sum1 = sum1 * 10 + (arr1[i] - 48);
            // System.out.println(arr1[i]);
        }
        return sum1;
    }
}



package ClassTest;

import java.util.Scanner;

public class Test06 {
    public static void main(String[] args) {
         /* 给你一个字符串 s，由若干单词组成，单词前后用一些空格字符隔开。
        返回字符串中最后一个单词的长度。
        单词是指仅由字母组成、不包含任何空格字符的最大子字符串。

        示例 1：输入：s = "Hello World“	输出：5
        解释：最后一个单词是“World”，长度为5。

        示例 2：输入：s = "   fly me   to   the moon"	输出：4
        解释：最后一个单词是“moon”，长度为4。

        示例 3：输入：s = "luffy is still joyboy"	输出：6
        解释：最后一个单词是长度为6的“joyboy”。*/


        //倒着遍历
        //直到遇到空格为止
        //那么遍历的次数就是单词的长度
        System.out.println("请输入一个英文句子或短语");
        String s = new Scanner(System.in).next();
        System.out.println("最后一个单词由" + getCount(s) + "个字母组成");
    }

    public static int getCount(String s) {
        StringBuilder sb = new StringBuilder();
        String str;
        str = sb.append(s).reverse().toString();
        char arr[] = str.toCharArray();
        int count = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == ' ') {
                break;
            }
            count++;
        }
        return count;
    }
}
